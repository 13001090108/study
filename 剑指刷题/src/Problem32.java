/**
 * Created by lsc on 2018/12/5.
 * <p>
 * 题目：输入一个整数 n，求从 1 到 n 这 n 个整数的十进制表示中 1 出现的次
 * 数。例如输入 12，这些整数中包含 1 的数字有 1,10,11,12，1 一共出现了 5 次。
 * 解题思路：解法二告诉我们 1~ N 中"1"的个数跟最高位有关，那我们换个角
 * 度思考，给定一个 N，我们分析 1~N 中的数在每一位上出现 1 的次数的和，看看
 * 每一位上"1"出现的个数的和由什么决定。
 * 1 位数的情况：在解法二中已经分析过，大于等于 1 的时候，有 1 个，小于 1 就
 * 没有。
 * 2 位数的情况：N=13,个位数出现的 1 的次数为 2，分别为 1 和 11，十位数出现 1
 * 的次数为 4，分别为 10,11,12,13，所以 f(N) = 2+4。N=23,个位数出现的 1 的
 * 次数为 3，分别为 1，11，21，十位数出现 1 的次数为 10，分别为 10~19，f(N)=3+10。
 * 由此我们发现，个位数出现 1 的次数不仅和个位数有关，和十位数也有关，如果
 * 个位数大于等于 1，则个位数出现 1 的次数为十位数的数字加 1；如果个位数为
 * 0，个位数出现 1 的次数等于十位数数字。而十位数上出现 1 的次数也不仅和十
 * 位数相关，也和个位数相关：如果十位数字等于 1，则十位数上出现 1 的次数为
 * 个位数的数字加 1，假如十位数大于 1，则十位数上出现 1 的次数为 10。
 * 3 位数的情况：
 * N=123，个位出现 1 的个数为 13:1,11,21，…，91,101,111,121。十位出现 1 的
 * 个数为 20:10~19,110~119。百位出现 1 的个数为 24:100~123。
 * <p>
 * <p>
 * 我们可以继续分析4位数，5位数，推到出下面一般情况：假设N,我们要计算百位上出现1的次数
 * 将由三部分决定：百位上的数字，百位以上的数字，百位以下的数字
 * <p>
 * 如果百位上的数字为0，则百位上出现1的次数仅由更高位决定，比如12013，
 * 百位上出现1的情况为100~199,1100~1199,2100~2199，…，11100~11199，共 1200
 * 个。即12 * 100.
 * <p>
 * 如果百位上的数字大于1，则百位上出现1的次数仅由最高位决定，比如12213，百位上出现1的情况为
 * 100~199,1100~1199,2100~2199，…，11100~11199，12100~12199 共 1300 个。等于更高位数字加1
 * 乘以当前位数，即（12+1）*100.
 * <p>
 * 如果百位上的数字为1，则百位上出现1的次数不仅受更高位影响，还受最低位影响。
 * 例如12113，受高位影响出现1的情况：100~199,1100~1199,2100~2199，…，
 * 11100~11199，共 1200 个，但它还受低位影响，出现1的情况是 12100~12113，
 * 共 14 个，等于低位数字13 + 1
 */


public class Problem32 {
    public static void main(String[] args) {
        Problem32 p = new Problem32();
        System.out.println(p.countOne(12113));
    }

    public long countOne(long n) {
        long count = 0;
        long i = 1;
        long current = 0, after = 0, before = 0;
        while ((n / i) != 0) {

            current = (n / i) % 10; //当前位数字
            before = n / (i * 10); //高位数字
            after = n - (n / i) * i; //低位数字
            if (current > 1)
                count = count + (before + 1) * i;
            else if (current == 0)
                count = count + before * i;
            else if (current == 1)
                count = count + before * i + after + 1;
        }
        i = i * 10;

        return count;
    }
}