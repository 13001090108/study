/**
 * Created by lsc on 2018/11/16.
 *
 */
/*
思路1：先判断二进制表示的最右1位是不是1，把整数和1做与运算即可，然后右移一位，再判断，直到整数变为0。

把整数右移一位和把整数除以2在数学上是等价的但是位运算效率最高，但是思路1可能会陷入死循环，如输入一个负数0x8000，
右移之后并不是0x4000，而是0xC000，因为负数移位后要补1，如果循环下去会变成0xFFFF。

思路2：为了避免死循环就要避免右移，我们首先把数字和1做与运算，判断它最低位是不是1，接着把1左移一位得到2，
在和输入数与运算，节能判断次低位是不是1，反复左移即可。

思路3：思路2中输入的数的二进制表示有几位，程序就会循环多少次，改进的思路3是二进制里有几个1就循环几次。
首先记住一个常用做法：把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当于把整数二进制表示中的最右边一个1变成0。
基于上述做法，一个整数的二进制表示中有多少个1，就可以进行多少次这样的操作。

 */

public class Problem10 {
    public static void main(String[] args) {
        Problem10 test = new Problem10();
        System.out.println(test.numberOf1(9));
    }
    public int numberOf1(int n) {
        int count = 0;
        while(n != 0) {
            n = n & (n - 1);
            count ++;
        }
        return count;
    }
}
